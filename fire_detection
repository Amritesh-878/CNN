import os
import numpy as np
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from sklearn.model_selection import train_test_split

# load and preprocess images
def load_images(base_dir, img_height, img_width):
    image_data = []
    labels = []  
    class_labels = {'fire': 1, 'no-fire': 0}
    
    for class_label, label in class_labels.items():
        class_folder = os.path.join(base_dir, class_label)
        for image_filename in os.listdir(class_folder):
            image_path = os.path.join(class_folder, image_filename)
            
            image = keras.preprocessing.image.load_img(image_path, target_size=(img_height, img_width))
            image_array = keras.preprocessing.image.img_to_array(image) / 255.0
            
            image_data.append(image_array)
            labels.append(label)
            
    return np.array(image_data), np.array(labels)

img_height = 256
img_width = 256

base_image_directory = 'Datasets\Fire'  
images, labels = load_images(base_image_directory, img_height, img_width)

train_images, test_images, train_labels, test_labels = train_test_split(images, labels, test_size=0.2, random_state=42)

# Define the CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(img_height, img_width, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),  
    Dense(1, activation='sigmoid') 
])

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy', 
              metrics=['accuracy'])


model.summary()

model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))


test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f"Test accuracy: {test_acc}")
